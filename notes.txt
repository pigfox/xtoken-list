https://docs.equalizer.finance/getting-started/how-do-i-borrow-a-flash-loan-a-deep-dive


export SEPOLIA_RPC_URL=https://sepolia.infura.io/v3/YOUR_INFURA_PROJECT_ID
export PRIVATE_KEY=YOUR_WALLET_PRIVATE_KEY


[default]
rpc_url = "${SEPOLIA_RPC_URL}"


forge test --fork-url $SEPOLIA_RPC_URL
forge script MyScript --fork-url $SEPOLIA_RPC_URL --broadcast
forge test --fork-url $SEPOLIA_RPC_URL --fork-block-number <BLOCK_NUMBER


Mainnet: Ethereum
VaultFactory

0xd811FBCE60218B214Cbdc972140F1a89D26e44F7

FlashLoanProvider

0x4EAF187ad4cE325bF6C84070b51c2f7224A51321


Testnet: Ethereum (Sepolia)
Contract Name	SC Address
Vault Factory

0xea281a04cf517aa0D4645bDDA0353b0958E4B1b4

Flash loan provider

0x0837b2aCcF87De52a099409863CDb5f3588342AD

bytes memory data = abi.encodeWithSelector(
    bytes4(keccak256("mintTo(address,uint256)")),
    address(this),
    maxTokenSupply
);

bytes4 selector;
assembly {
    selector := mload(add(data, 32))
}

if (selector != bytes4(0)) {
    erc20Token.mint(maxTokenSupply);
} else {
    // Option 2: Modify ERC20Token for testing (not recommended for production)
    // Or
    // Option 3: Use forge-std Mock to mock erc20Token behavior
}

 /*
        address equalizerLenderAddress = vm.envAddress("SEPOLIA_EQUALIZER_LENDER");
        pigfox = new Pigfox();
        pigfox.setLender(equalizerLenderAddress);
        vault.transerToken(address(erc20Token), address(pigfox), maxTokenSupply);
        dex1.setTokenPrice(address(erc20Token), 100);
        dex2.setTokenPrice(address(erc20Token), 80);
        if (dex1.getTokenPrice(address(erc20Token)) == dex2.getTokenPrice(address(erc20Token))) {
            revert("Prices are equal");
        }

        bytes memory data = abi.encode(address(dex1), address(dex2), address(erc20Token));
        bytes32 dataBytes = pigfox.onFlashLoan(address(pigfox), address(erc20Token), maxTokenSupply, 0, data);
        console.log("data", bytes32ToString(dataBytes));
        */